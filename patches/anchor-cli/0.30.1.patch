diff --git a/cli/src/lib.rs b/cli/src/lib.rs
index 9befe845..7a9ae066 100644
--- a/cli/src/lib.rs
+++ b/cli/src/lib.rs
@@ -13,7 +13,6 @@ use anchor_lang_idl::types::{Idl, IdlArrayLen, IdlDefinedFields, IdlType, IdlTyp
 use anyhow::{anyhow, Context, Result};
 use checks::{check_anchor_version, check_overflow};
 use clap::Parser;
-use dirs::home_dir;
 use flate2::read::GzDecoder;
 use flate2::read::ZlibDecoder;
 use flate2::write::{GzEncoder, ZlibEncoder};
@@ -533,7 +532,7 @@ type RestoreToolchainCallbacks = Vec<Box<dyn FnOnce() -> Result<()>>>;
 ///
 /// Returns the previous versions to restore back to.
 fn override_toolchain(cfg_override: &ConfigOverride) -> Result<RestoreToolchainCallbacks> {
-    let mut restore_cbs: RestoreToolchainCallbacks = vec![];
+    let restore_cbs: RestoreToolchainCallbacks = vec![];
 
     let cfg = Config::discover(cfg_override)?;
     if let Some(cfg) = cfg {
@@ -565,50 +564,7 @@ fn override_toolchain(cfg_override: &ConfigOverride) -> Result<RestoreToolchainC
         if let Some(solana_version) = &cfg.toolchain.solana_version {
             let current_version = get_current_version("solana")?;
             if solana_version != &current_version {
-                // We are overriding with `solana-install` command instead of using the binaries
-                // from `~/.local/share/solana/install/releases` because we use multiple Solana
-                // binaries in various commands.
-                fn override_solana_version(version: String) -> Result<bool> {
-                    let output = std::process::Command::new("solana-install")
-                        .arg("list")
-                        .output()?;
-                    if !output.status.success() {
-                        return Err(anyhow!("Failed to list installed `solana` versions"));
-                    }
-
-                    // Hide the installation progress if the version is already installed
-                    let is_installed = std::str::from_utf8(&output.stdout)?
-                        .lines()
-                        .any(|line| parse_version(line) == version);
-                    let (stderr, stdout) = if is_installed {
-                        (Stdio::null(), Stdio::null())
-                    } else {
-                        (Stdio::inherit(), Stdio::inherit())
-                    };
-
-                    std::process::Command::new("solana-install")
-                        .arg("init")
-                        .arg(&version)
-                        .stderr(stderr)
-                        .stdout(stdout)
-                        .spawn()?
-                        .wait()
-                        .map(|status| status.success())
-                        .map_err(|err| anyhow!("Failed to run `solana-install` command: {err}"))
-                }
-
-                match override_solana_version(solana_version.to_owned())? {
-                    true => restore_cbs.push(Box::new(|| {
-                        match override_solana_version(current_version)? {
-                            true => Ok(()),
-                            false => Err(anyhow!("Failed to restore `solana` version")),
-                        }
-                    })),
-                    false => eprintln!(
-                        "Failed to override `solana` version to {solana_version}, \
-                        using {current_version} instead"
-                    ),
-                }
+                return Err(anyhow!("Current Solana version `{current_version}` does not match configured version `{solana_version}`"));
             }
         }
 
@@ -631,40 +587,7 @@ fn override_toolchain(cfg_override: &ConfigOverride) -> Result<RestoreToolchainC
                 .unwrap_or(VERSION)
                 .to_owned();
             if anchor_version != &current_version {
-                let binary_path = home_dir()
-                    .unwrap()
-                    .join(".avm")
-                    .join("bin")
-                    .join(format!("{ANCHOR_BINARY_PREFIX}{anchor_version}"));
-
-                if !binary_path.exists() {
-                    eprintln!(
-                        "`anchor` {anchor_version} is not installed with `avm`. Installing...\n"
-                    );
-
-                    let exit_status = std::process::Command::new("avm")
-                        .arg("install")
-                        .arg(anchor_version)
-                        .spawn()?
-                        .wait()?;
-                    if !exit_status.success() {
-                        eprintln!(
-                            "Failed to install `anchor` {anchor_version}, \
-                            using {current_version} instead"
-                        );
-
-                        return Ok(restore_cbs);
-                    }
-                }
-
-                let exit_code = std::process::Command::new(binary_path)
-                    .args(std::env::args_os().skip(1))
-                    .spawn()?
-                    .wait()?
-                    .code()
-                    .unwrap_or(1);
-                restore_toolchain(restore_cbs)?;
-                std::process::exit(exit_code);
+                return Err(anyhow!("Current Anchor version `{current_version}` does not match configured version `{anchor_version}`"));
             }
         }
     }
diff --git a/idl/src/build.rs b/idl/src/build.rs
index 96dc3db2..02d754c9 100644
--- a/idl/src/build.rs
+++ b/idl/src/build.rs
@@ -65,8 +65,6 @@ fn build(program_path: &Path, resolution: bool, skip_lint: bool, no_docs: bool)
         .map(|toolchain| format!("+{}", toolchain))
         .unwrap_or_else(|_| "+nightly".to_string());
 
-    install_toolchain_if_needed(&toolchain)?;
-
     let output = Command::new("cargo")
         .args([
             &toolchain,
@@ -202,23 +200,6 @@ fn build(program_path: &Path, resolution: bool, skip_lint: bool, no_docs: bool)
     idl.ok_or_else(|| anyhow!("IDL doesn't exist"))
 }
 
-/// Install the given toolchain if it's not already installed.
-fn install_toolchain_if_needed(toolchain: &str) -> Result<()> {
-    let is_installed = Command::new("cargo")
-        .arg(toolchain)
-        .output()?
-        .status
-        .success();
-    if !is_installed {
-        Command::new("rustup")
-            .args(["toolchain", "install", toolchain.trim_start_matches('+')])
-            .spawn()?
-            .wait()?;
-    }
-
-    Ok(())
-}
-
 /// Convert paths to name if there are no conflicts.
 fn convert_module_paths(idl: Idl) -> Idl {
     let idl = serde_json::to_string(&idl).unwrap();
